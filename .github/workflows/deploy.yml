name: Dynatrace Configuration Management

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DT_ACCOUNT_ID: ${{ secrets.DT_ACCOUNT_ID }}
  DT_CLIENT_ID: ${{ secrets.DT_CLIENT_ID }}
  DT_CLIENT_SECRET: ${{ secrets.DT_CLIENT_SECRET }}
  TF_VAR_metrics_cost: ${{ secrets.metrics_cost }}
  TF_VAR_full_stack_cost: ${{ secrets.full_stack_cost }}
  TF_VAR_serverless_cost: ${{ secrets.serverless_cost }}
  TF_VAR_synthetic_actions_cost: ${{ secrets.synthetic_actions_cost }}
  TF_VAR_synthetic_requests_cost: ${{ secrets.synthetic_requests_cost }}
  DYNATRACE_DEBUG: "true"
  DYNATRACE_LOG_HTTP: "terraform-provider-dynatrace.http.log"
  DYNATRACE_HTTP_RESPONSE: "true"

jobs:
  DeployNonProd:
    env:
      DYNATRACE_API_TOKEN: ${{ secrets.NONPROD_DYNATRACE_API_TOKEN }}
      DYNATRACE_ENV_URL: ${{ secrets.NONPROD_DYNATRACE_ENV_URL }}
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || github.actor != 'dependabot[bot]'
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_OBSERVABILITY_CONFIG_IAM_ROLE_ARN }}
          aws-region: eu-west-2

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: pip install -r requirements.txt

      - run: ./get-accounts.py 'non-production'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_ROLE_ARN }}
          aws-region: eu-west-2

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.1

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - run: terraform workspace select nonproduction

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform apply
        run: |
          terraform apply -var="environment=nonproduction" -var="team_account_id=${{ secrets.NON_PROD_TEAM_ACCOUNT_ID }}" -auto-approve -refresh=false

      - name: export logs
        run: cat terraform-provider-dynatrace.http.log
  DeployProd:
    env:
      DYNATRACE_API_TOKEN: ${{ secrets.PROD_DYNATRACE_API_TOKEN }}
      DYNATRACE_ENV_URL: ${{ secrets.PROD_DYNATRACE_ENV_URL }}
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || github.actor != 'dependabot[bot]'
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_OBSERVABILITY_CONFIG_IAM_ROLE_ARN }}
          aws-region: eu-west-2

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: pip install -r requirements.txt

      - run: ./get-accounts.py 'production'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_ROLE_ARN }}
          aws-region: eu-west-2

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.1

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - run: terraform workspace select production

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform apply
        run: |
          terraform apply -var="environment=production" -var="team_account_id=${{ secrets.PROD_TEAM_ACCOUNT_ID }}" -auto-approve -refresh=false

      - name: export logs
        run: cat terraform-provider-dynatrace.http.log
