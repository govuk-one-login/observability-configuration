name: Check Terraform Configuration

on:
  push:
  pull_request:
    types: [opened, reopened]

env:
  DT_ACCOUNT_ID: ${{ secrets.DT_ACCOUNT_ID }}
  DT_CLIENT_ID: ${{ secrets.DT_CLIENT_ID }}
  DT_CLIENT_SECRET: ${{ secrets.DT_CLIENT_SECRET }}
  TF_VAR_metrics_cost: ${{ secrets.metrics_cost }}
  TF_VAR_full_stack_cost: ${{ secrets.full_stack_cost }}
  TF_VAR_serverless_cost: ${{ secrets.serverless_cost }}
  TF_VAR_synthetic_actions_cost: ${{ secrets.synthetic_actions_cost }}
  TF_VAR_synthetic_requests_cost: ${{ secrets.synthetic_requests_cost }}

jobs:
  Check_DashboardFormat:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check dashboard IDs not present
        run: |
          for file in dashboards/*.json dashboards/**/*.json; do
            echo "Checking ${file}"
            ID=$(jq '.id' < $file)
            if [ "$ID" != null ]; then
              echo "Error: ${file} contains '.id' (${ID})"
              exit 1
            fi
          done
          
      - name: Check dashboard tiles are sorted by name
        run: |
          for file in dashboards/signin-signup.json; do
            echo "Checking ${file}"
            ID=$(jq -r '.tiles | if sort_by(.name) == . then "ok" else "not ok" end' < $file)
            if [ "$ID" != "ok" ]; then
              echo "Error: ${file} tiles are not sorted by name"
              exit 1
            fi
          done

  Check_NonProd:
    env:
      DYNATRACE_API_TOKEN: ${{ secrets.NONPROD_DYNATRACE_API_TOKEN}}
      DYNATRACE_ENV_URL: ${{ secrets.NONPROD_DYNATRACE_ENV_URL}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::892537467220:role/ObservationConfigurationGitHubIde-GitHubActionsRole-MdPyTyImAExz
          aws-region: eu-west-2

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
      - run: pip install -r requirements.txt

      - run: ./get-accounts.py 'non-production'
      - run: cat accounts.csv

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_ROLE_ARN }}
          aws-region: eu-west-2

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.1

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - run: terraform workspace select nonproduction

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -var environment=nonproduction
  Check_Prod:
    env:
      DYNATRACE_API_TOKEN: ${{ secrets.PROD_DYNATRACE_API_TOKEN}}
      DYNATRACE_ENV_URL: ${{ secrets.PROD_DYNATRACE_ENV_URL}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::892537467220:role/ObservationConfigurationGitHubIde-GitHubActionsRole-MdPyTyImAExz
          aws-region: eu-west-2

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
      - run: pip install -r requirements.txt

      - run: ./get-accounts.py 'production'
      - run: cat accounts.csv

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_ROLE_ARN }}
          aws-region: eu-west-2

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.1

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - run: terraform workspace select production

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -var environment=production
