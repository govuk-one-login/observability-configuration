{
  "version": 20,
  "variables": [
    {
      "version": 2,
      "key": "Environment",
      "type": "csv",
      "visible": true,
      "editable": true,
      "input": "FAI - Build - 182406244095,FAI - Staging - 866337353834,FAI - Integration - 962503174980,FAI - Production - 786216885304",
      "multiple": false,
      "defaultValue": "FAI - Production - 786216885304"
    },
    {
      "version": 2,
      "key": "SelectedAWSAccount",
      "type": "code",
      "visible": false,
      "editable": true,
      "input": "export default async function () {\n  const AWSAccountID = $Environment.replaceAll(\" \", \"\").split(\"-\")[2]\n  return [AWSAccountID]\n}",
      "multiple": false
    },
    {
      "version": 2,
      "key": "EnvironmentName",
      "type": "code",
      "visible": false,
      "editable": true,
      "input": "export default async function () {\n  return $Environment.replaceAll(\" \", \"\").split(\"-\")[1].toLowerCase();\n}",
      "multiple": false
    }
  ],
  "tiles": {
    "0": {
      "type": "markdown",
      "content": "## Fraud FAI Dashboard\n\nThis dashboard displays metrics for the Fraud Admin Interface (FAI) application for Staging, Integration and Production environment. For further information on FAI see [here](https://govukverify.atlassian.net/wiki/x/sgE55Q)."
    },
    "1": { "type": "markdown", "content": "## Gateway and WAF Metrics" },
    "2": {
      "title": "Gateway Request Latency",
      "type": "data",
      "query": "timeseries { avgLatencyByAccountIdApiNameRegion = avg(cloud.aws.apigateway.latencyByAccountIdApiNameRegion, default: 0), \nmaxLatencyByAccountIdApiNameRegion = max(cloud.aws.apigateway.latencyByAccountIdApiNameRegion, default: 0),\nminLatencyByAccountIdApiNameRegion = min(cloud.aws.apigateway.latencyByAccountIdApiNameRegion, default: 0) }, \nby: { apiname }, \nfilter: { aws.account.id == $SelectedAWSAccount }, union: true\n| fieldsRename `Avg Latency` = avgLatencyByAccountIdApiNameRegion\n| fieldsRename `Max Latency` = maxLatencyByAccountIdApiNameRegion\n| fieldsRename `Min Latency` = minLatencyByAccountIdApiNameRegion\n| limit 100",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": { "label": "Latency", "isLabelVisible": true },
          "rightYAxisSettings": { "label": "Latency", "isLabelVisible": true },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["Avg Latency", "Max Latency", "Min Latency"],
            "timestamp": "timeframe"
          },
          "gapPolicy": "connect"
        },
        "legend": { "ratio": 27 },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "countByAccountIdApiNameRegionStage",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [
          {
            "identifier": "Avg Latency",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1740138132831
          },
          {
            "identifier": "Max Latency",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1743762671776
          },
          {
            "identifier": "Min Latency",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1743762675242
          }
        ],
        "dataMapping": {
          "displayedFields": [
            "apiname",
            "Avg Latency",
            "Max Latency",
            "Min Latency"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "3": {
      "title": "Gateway HTTP Errors",
      "type": "data",
      "query": "timeseries { Errors4xx = sum(cloud.aws.apigateway.4xxErrorByAccountIdApiNameRegionStage, default: 0), \nErrors5xx = sum(cloud.aws.apigateway.5xxErrorByAccountIdApiNameRegionStage, default: 0)}, \nby: { apiname }, \nfilter: { aws.account.id == $SelectedAWSAccount }, \nunion: true",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "Errors",
            "isLabelVisible": true,
            "max": null
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["Errors4xx", "Errors5xx"],
            "timestamp": "timeframe"
          },
          "gapPolicy": { "threshold": "1h" }
        },
        "legend": { "ratio": 26 },
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "4xxErrorByAccountIdApiNameRegionStage",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [],
        "dataMapping": {
          "displayedFields": ["apiname", "Errors4xx", "Errors5xx"]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "4": {
      "title": "Gateway Requests and Latencies (all gateways)",
      "type": "data",
      "query": "timeseries { countByAccountIdApiNameRegion = sum(cloud.aws.apigateway.countByAccountIdApiNameRegion), latencyByAccountIdApiNameRegion = avg(cloud.aws.apigateway.latencyByAccountIdApiNameRegion) }, \nby: { apiname }, \nfilter: { aws.account.id == $SelectedAWSAccount }, \nunion: true\n| fieldsAdd Count = arraySum(countByAccountIdApiNameRegion)\n| fieldsAdd Latency = arrayAvg(latencyByAccountIdApiNameRegion)\n| fieldsRename `API Name` = apiname",
      "visualization": "table",
      "visualizationSettings": {
        "table": {
          "columnTypeOverrides": [
            {
              "fields": [
                "countByAccountIdApiNameRegion",
                "latencyByAccountIdApiNameRegion"
              ],
              "value": "sparkline",
              "id": 1741626519288
            }
          ],
          "hiddenColumns": [
            ["timeframe"],
            ["interval"],
            ["countByAccountIdApiNameRegion"],
            ["latencyByAccountIdApiNameRegion"]
          ],
          "columnWidths": {
            "[\"apiname\"]": 261.6579895019531,
            "[\"countByAccountIdApiNameRegion\"]": 112.14236450195312,
            "[\"API Name\"]": 336.9600830078125,
            "[\"Count\"]": 153.50868225097656
          }
        },
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "countByAccountIdApiNameRegion",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [
          {
            "identifier": "Count",
            "unitCategory": "unspecified",
            "baseUnit": "count",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1739966282364
          },
          {
            "identifier": "Latency",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": "millisecond",
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1739966292614
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "5": {
      "title": "4XX Errors at Gateway by Endpoint",
      "type": "data",
      "query": "\ntimeseries `4xxErrorByAccountIdApiNameRegionStage` = sum(cloud.aws.apigateway.4xxErrorByAccountIdApiNameRegionStage), \nby: { apiname }, \nfilter: { aws.account.id == $SelectedAWSAccount }\n| fieldsAdd `4XX Error Count` = arraySum(`4xxErrorByAccountIdApiNameRegionStage`)\n| fieldsRename `API Name` = apiname\n| sort `4XX Error Count` desc",
      "visualization": "table",
      "visualizationSettings": {
        "table": {
          "hiddenColumns": [
            ["timeframe"],
            ["interval"],
            ["4xxErrorByAccountIdApiNameRegionStage"]
          ],
          "columnTypeOverrides": [
            {
              "fields": ["4xxErrorByAccountIdApiNameRegionStage"],
              "value": "sparkline",
              "id": 1741626519495
            }
          ],
          "sortBy": [{ "columnId": "[\"API Name\"]", "direction": "ascending" }]
        },
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "4xxErrorByAccountIdApiNameRegionStage",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [
          {
            "identifier": "4XX Error Count",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1739877944134
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "6": {
      "title": "5XX Errors at Gateway by Endpoint",
      "type": "data",
      "query": "timeseries `5xxErrorByAccountIdApiNameRegionStage` = sum(cloud.aws.apigateway.5xxErrorByAccountIdApiNameRegionStage), \nby: { apiname }, \nfilter: { aws.account.id == $SelectedAWSAccount }\n| fieldsAdd `5XX Error Count` = arraySum(`5xxErrorByAccountIdApiNameRegionStage`)\n| fieldsRename `API Name` = apiname\n| sort `5XX Error Count` desc",
      "visualization": "table",
      "visualizationSettings": {
        "table": {
          "hiddenColumns": [
            ["timeframe"],
            ["interval"],
            ["5xxErrorByAccountIdApiNameRegionStage"]
          ],
          "columnTypeOverrides": [
            {
              "fields": ["5xxErrorByAccountIdApiNameRegionStage"],
              "value": "sparkline",
              "id": 1741626519500
            }
          ],
          "sortBy": [{ "columnId": "[\"API Name\"]", "direction": "ascending" }]
        },
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "5xxErrorByAccountIdApiNameRegionStage",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [
          {
            "identifier": "5XX Error Count",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1739877995399
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "7": {
      "title": "Requests Blocked by WAFS (all WAFs)",
      "type": "data",
      "query": "timeseries blockedRequestsByAccountIdRegionRuleWebACL = sum(cloud.aws.wafv2.blockedRequestsByAccountIdRegionRuleWebACL), \nby: { aws.region, aws.account.id, rule, webacl, region }, \nfilter: { aws.account.id == $SelectedAWSAccount }\n| fieldsAdd Count = arraySum(blockedRequestsByAccountIdRegionRuleWebACL)\n| fieldsRename `Region` = aws.region\n| fieldsRename `Account` = aws.account.id\n| fieldsRename `Rule` = rule\n| fieldsRename `Web ACL` = webacl\n| sort Count desc",
      "visualization": "table",
      "visualizationSettings": {
        "table": {
          "hiddenColumns": [
            ["timeframe"],
            ["interval"],
            ["region"],
            ["blockedRequestsByAccountIdRegionRuleWebACL"]
          ],
          "rowDensity": "default",
          "selectedColumnForRowThreshold": "blockedRequestsByAccountIdRegionRuleWebACL",
          "columnWidths": {
            "[\"Rule\"]": 412.0469055175781,
            "[\"Account\"]": 123.42535400390625,
            "[\"Region\"]": 107.5763931274414,
            "[\"Web ACL\"]": 573.3
          },
          "columnTypeOverrides": [
            {
              "fields": ["blockedRequestsByAccountIdRegionRuleWebACL"],
              "value": "sparkline",
              "id": 1741626519436
            }
          ]
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "blockedRequestsByAccountIdRegionRuleWebACL",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [
          {
            "identifier": "blockedRequestsByAccountIdRegionRuleWebACL",
            "unitCategory": "unspecified",
            "baseUnit": "count",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 0,
            "id": "blockedRequestsByAccountIdRegionRuleWebACL"
          },
          {
            "identifier": "Count",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1739878496348
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "8": { "type": "markdown", "content": "## Lambda Metrics" },
    "25": {
      "title": "Invocations",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n\n  query = `timeseries invocationsByAccountIdFunctionNameRegion = sum(cloud.aws.lambda.invocationsByAccountIdFunctionNameRegion, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["invocationsByAccountIdFunctionNameRegion"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["functionname"] }
      }
    },
    "26": {
      "title": "Total Invocations",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n\n  query = `timeseries invocations = sum(cloud.aws.lambda.invocationsByAccountIdFunctionNameRegion, rate: 1min), by: { functionname }, filter: { (aws.account.id == \"${$SelectedAWSAccount}\") AND contains(functionname, \"${filter}\") } | fieldsAdd invocationsSum = arraySum(invocations) | sort invocationsSum desc`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "categoricalBarChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "legend": { "hidden": true },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "functionname",
            "isCategoryLabelVisible": false,
            "categoryAxis": ["functionname"],
            "valueAxis": ["invocationsSum"],
            "valueAxisLabel": "invocationsSum",
            "isValueLabelVisible": false
          }
        },
        "legend": { "ratio": 15 },
        "autoSelectVisualization": false,
        "thresholds": [],
        "unitsOverrides": [
          {
            "identifier": "invocationsSum",
            "unitCategory": "unspecified",
            "baseUnit": "count",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1740653672393
          }
        ]
      }
    },
    "27": {
      "title": "Duration",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n  \n  query = `timeseries durationByAccountIdFunctionNameRegion = avg(cloud.aws.lambda.durationByAccountIdFunctionNameRegion, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}\n\n\n\n",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["durationByAccountIdFunctionNameRegion"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "unitsOverrides": [
          {
            "identifier": "durationByAccountIdFunctionNameRegion",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": "millisecond",
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1740153156962
          }
        ],
        "dataMapping": { "displayedFields": ["functionname"] }
      }
    },
    "28": {
      "title": "Concurrent Executions",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n\n  query = `timeseries concurrentExecutionsByAccountIdFunctionNameRegion = max(cloud.aws.lambda.concurrentExecutionsByAccountIdFunctionNameRegion, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "tooltip": { "variant": "shared" },
          "fieldMapping": {
            "leftAxisValues": [
              "concurrentExecutionsByAccountIdFunctionNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["functionname"] }
      }
    },
    "29": {
      "title": "Error Rate",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { TimeframeSelector } from '@dynatrace/strato-components-preview/forms';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n\n  let env:string = $Environment;\n  let filter:string = \"-fa-\";\n  \n  query = `timeseries { errorsByAccountIdFunctionNameRegion = sum(cloud.aws.lambda.errorsByAccountIdFunctionNameRegion), invocationsByAccountIdFunctionNameRegion = sum(cloud.aws.lambda.invocationsByAccountIdFunctionNameRegion) }, by: { functionname, aws.account.id }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") } | fieldsAdd errorRate = (errorsByAccountIdFunctionNameRegion[] / invocationsByAccountIdFunctionNameRegion[]) * 100 | fieldsRemove invocationsByAccountIdFunctionNameRegion, errorsByAccountIdFunctionNameRegion | limit 100`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to  } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["errorRate"],
            "timestamp": "timeframe"
          },
          "gapPolicy": "connect"
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "unitsOverrides": [
          {
            "identifier": "errorRate",
            "unitCategory": "percentage",
            "baseUnit": "percent",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1740155455179
          }
        ],
        "dataMapping": { "displayedFields": ["functionname"] }
      }
    },
    "30": {
      "title": "Error Count",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { TimeframeSelector } from '@dynatrace/strato-components-preview/forms';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n  let env:string = $Environment;\n  let filter:string = \"-fa-\";\n  \n  query = `timeseries errorsByAccountIdFunctionNameRegion = sum(cloud.aws.lambda.errorsByAccountIdFunctionNameRegion), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") } | fieldsAdd errorCount = arraysum(errorsByAccountIdFunctionNameRegion) | limit 100`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to  } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["errorsByAccountIdFunctionNameRegion"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["functionname"] }
      }
    },
    "31": {
      "title": "Throttles",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { TimeframeSelector } from '@dynatrace/strato-components-preview/forms';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n\n  if ($EnvironmentName == \"Integration\");\n  if ($EnvironmentName == \"Production\");\n  if ($SelectedAWSAccount == \"abc\");\n\n  query = `timeseries throttleCount = sum(cloud.aws.lambda.throttlesByAccountIdFunctionNameRegion, default: 0), filter: aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"-fa-\"), by: { functionname }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to  } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["throttleCount"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": 1,
            "field": "",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": ""
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": "≥",
                "label": ""
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "≥",
                "label": ""
              }
            ]
          }
        ],
        "dataMapping": { "displayedFields": ["functionname"] }
      }
    },
    "34": {
      "title": "Gateway Request Count",
      "type": "data",
      "query": "timeseries { countByAccountIdApiName = sum(cloud.aws.apigateway.countByAccountIdApiNameRegionStage, default: 0) }, \nby: { apiname }, \nfilter: { aws.account.id == $SelectedAWSAccount }, union: true\n| fieldsRename `Count` = countByAccountIdApiName\n| limit 100",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "Request Count",
            "isLabelVisible": true
          },
          "rightYAxisSettings": { "label": "Latency", "isLabelVisible": true },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["Count"],
            "timestamp": "timeframe"
          },
          "gapPolicy": "connect"
        },
        "legend": { "ratio": 26 },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": 1,
            "field": "",
            "title": "Account Limit Threshold",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": "#EEA746",
                "comparator": "≥",
                "label": "",
                "value": 5000
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                },
                "comparator": "≥",
                "label": "",
                "value": 8000
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "≥",
                "label": "",
                "value": 10000
              }
            ]
          }
        ],
        "unitsOverrides": [
          {
            "identifier": "Latency",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1740138132831
          }
        ],
        "dataMapping": { "displayedFields": ["apiname"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "componentState": {
          "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.StaticThresholdAnomalyDetectionAnalyzer",
          "inputData": {
            "dt.statistics.ui.anomaly_detection.StaticThresholdAnomalyDetectionAnalyzer": {
              "generalParameters": {
                "timeframe": {
                  "startTime": "2025-04-04T12:12:07.068Z",
                  "endTime": "2025-04-04T12:42:07.068Z"
                },
                "resolveDimensionalQueryData": true,
                "logVerbosity": "INFO"
              },
              "alertCondition": "ABOVE",
              "alertOnMissingData": false,
              "violatingSamples": 3,
              "slidingWindow": 5,
              "dealertingSamples": 5,
              "query": "timeseries { countByAccountIdApiName = sum(cloud.aws.apigateway.countByAccountIdApiNameRegionStage, default: 0) }, \nby: { apiname }, \nfilter: { aws.account.id == \"640259204840\" }, union: true\n| fieldsRename `Count` = countByAccountIdApiName\n| limit 100",
              "threshold": 8000
            }
          },
          "analyzerHints": {
            "dt.statistics.ui.anomaly_detection.StaticThresholdAnomalyDetectionAnalyzer": {
              "unit": { "unitCategory": "unspecified", "baseUnit": "count" }
            }
          }
        },
        "davisVisualization": { "isAvailable": true }
      },
      "segments": { "tileSegments": [], "tileSegmentsEnabled": false }
    },
    "37": {
      "title": "Claimed Account Concurrency for $SelectedAWSAccount",
      "type": "data",
      "query": "timeseries concurrentExecutionsByAccountIdFunctionNameRegion = max(cloud.aws.lambda.claimedAccountConcurrencyByAccountIdRegion, default: 0), \nfilter: { aws.account.id == $SelectedAWSAccount }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "legend": { "hidden": true },
          "leftYAxisSettings": {
            "label": "ConcurrentExecutions",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "concurrentExecutionsByAccountIdFunctionNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": 1,
            "field": "",
            "title": "Account Limit Threshold",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": "#EEA746",
                "comparator": "≥",
                "label": "",
                "value": 500
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                },
                "comparator": "≥",
                "label": "",
                "value": 800
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1000
              }
            ]
          }
        ],
        "dataMapping": {
          "displayedFields": [
            "concurrentExecutionsByAccountIdFunctionNameRegion"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      }
    },
    "39": {
      "title": "Recursive Executions Dropped",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n  let env:string = $Environment;\n  let filter:string = \"-fa-\";\n  \n  query = `timeseries concurrentExecutionsByAccountIdFunctionNameRegion = sum(cloud.aws.lambda.recursiveInvocationsDroppedByAccountIdExecutedVersionFunctionNameRegionResource, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": ["interval"],
          "fieldMapping": {
            "leftAxisValues": [
              "concurrentExecutionsByAccountIdFunctionNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": []
      }
    },
    "40": {
      "title": "Async Event Age",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n\n  query = `timeseries asyncEventAge = avg(cloud.aws.lambda.asyncEventAgeByAccountIdFunctionNameRegion, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": ["interval"],
          "fieldMapping": {
            "leftAxisValues": ["asyncEventAge"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "unitsOverrides": [
          {
            "identifier": "asyncEventAge",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1741623406425
          }
        ]
      }
    },
    "41": {
      "title": "Async Events Received",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n  \n  query = `timeseries asyncEventsReceived = sum(cloud.aws.lambda.asyncEventsReceivedByAccountIdFunctionNameRegion, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": ["interval"],
          "fieldMapping": {
            "leftAxisValues": ["asyncEventsReceived"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": []
      }
    },
    "42": {
      "title": "Iterator Age",
      "type": "code",
      "input": "import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nexport default async function () {\n  const timeout = 60;\n  let query;\n\nlet env:string = $Environment;\nlet filter:string = \"-fa-\";\n\n  query = `timeseries iteratorAge = avg(cloud.aws.lambda.iteratorAgeByAccountIdFunctionNameRegionResource, default: 0), by: { functionname }, filter: { aws.account.id == \"${$SelectedAWSAccount}\" AND contains(functionname, \"${filter}\") }`;\n  \n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout, defaultTimeframeStart: $dt_timeframe_from, defaultTimeframeEnd: $dt_timeframe_to } });\n\n  return response.result;\n}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": ["interval"],
          "fieldMapping": {
            "leftAxisValues": ["iteratorAge"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "unitsOverrides": [
          {
            "identifier": "iteratorAge",
            "unitCategory": "time",
            "baseUnit": "millisecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1741623770672
          }
        ]
      }
    },
    "51": { "type": "markdown", "content": "## Dynamo DB Metrics" },
    "52": {
      "title": "Throttled Requests",
      "type": "data",
      "query": "timeseries throttledRequests = sum(cloud.aws.dynamodb.throttledRequestsByAccountIdOperationRegionTableName, default: 0),\nby: { tablename },\nfilter: { aws.account.id == $SelectedAWSAccount }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": [
            "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "successfulRequestLatencyByAccountIdOperationRegionTableName.0",
            "successfulRequestLatencyByAccountIdOperationRegionTableName.1",
            "interval"
          ],
          "fieldMapping": {
            "leftAxisValues": ["throttledRequests"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": []
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframeEnabled": true,
        "tileTimeframe": { "from": "now()-365d", "to": "now()" }
      }
    },
    "53": {
      "title": "Write Throttle Events",
      "type": "data",
      "query": "timeseries writeThrottleEvents = sum(cloud.aws.dynamodb.writeThrottleEventsByAccountIdRegionTableName, default: 0),\nby: { tablename },\nfilter: { aws.account.id == $SelectedAWSAccount }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": [
            "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "successfulRequestLatencyByAccountIdOperationRegionTableName.0",
            "successfulRequestLatencyByAccountIdOperationRegionTableName.1",
            "interval"
          ],
          "fieldMapping": {
            "leftAxisValues": ["writeThrottleEvents"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": []
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframeEnabled": true,
        "tileTimeframe": { "from": "now()-365d", "to": "now()" }
      }
    },
    "54": {
      "title": "Consumed Read Capacity",
      "type": "data",
      "query": "timeseries consumedReadCapacity = sum(cloud.aws.dynamodb.consumedReadCapacityUnitsByAccountIdGlobalSecondaryIndexNameRegionTableName, default: 0),\nby: { tablename },\nfilter: { aws.account.id == $SelectedAWSAccount }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "hiddenLegendFields": [
            "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "successfulRequestLatencyByAccountIdOperationRegionTableName.0",
            "successfulRequestLatencyByAccountIdOperationRegionTableName.1",
            "interval"
          ],
          "fieldMapping": {
            "leftAxisValues": ["consumedReadCapacity"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": []
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframeEnabled": true,
        "tileTimeframe": { "from": "now()-365d", "to": "now()" }
      }
    },
    "55": {
      "title": "Consumed Write Capacity",
      "type": "data",
      "query": "timeseries consumedReadCapacity = sum(cloud.aws.dynamodb.consumedWriteCapacityUnitsByAccountIdRegionTableName, default: 0),\nby: { tablename },\nfilter: { aws.account.id == $SelectedAWSAccount }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["consumedReadCapacity"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [],
        "dataMapping": { "displayedFields": ["tablename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframeEnabled": false,
        "tileTimeframe": { "from": "now()-365d", "to": "now()" }
      }
    },
    "56": {
      "title": "Average Request Latency",
      "type": "data",
      "query": "timeseries requestLatency = avg(cloud.aws.dynamodb.successfulRequestLatencyByAccountIdOperationRegionTableName, default: 0),\nby: { tablename, operation },\nfilter: { aws.account.id == $SelectedAWSAccount }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": ["requestLatency"],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": "0",
            "title": "",
            "field": "successfulRequestLatencyByAccountIdOperationRegionTableName",
            "rules": [
              { "id": "0", "label": "", "comparator": "≥", "color": "#7dc540" },
              { "id": "1", "label": "", "comparator": "≥", "color": "#f5d30f" },
              { "id": "2", "label": "", "comparator": "≥", "color": "#dc172a" }
            ],
            "isEnabled": true
          }
        ],
        "unitsOverrides": [],
        "dataMapping": { "displayedFields": ["tablename", "operation"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframeEnabled": false,
        "tileTimeframe": { "from": "now()-365d", "to": "now()" }
      }
    },
    "57": { "type": "markdown", "content": "## SQS Metrics" },
    "62": {
      "title": "Messages Sent - SQS",
      "description": "",
      "type": "data",
      "query": "timeseries sum(cloud.aws.sqs.numberOfMessagesSentByAccountIdQueueNameRegion), \nby: { queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND NOT(contains( queuename, \"DeadLetter\")) AND NOT(contains( queuename, \"Logging\")) }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "NumberOfMessagesSent",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "seriesOverrides": [
            {
              "seriesId": [
                "count(cloud.aws.sqs.numberOfMessagesSentByAccountIdQueueNameRegion)"
              ],
              "override": { "color": "#b3007d" }
            }
          ],
          "fieldMapping": {
            "leftAxisValues": [
              "sum(cloud.aws.sqs.numberOfMessagesSentByAccountIdQueueNameRegion)"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      },
      "segments": { "tileSegments": [], "tileSegmentsEnabled": false }
    },
    "63": {
      "title": "Messages Received - SQS",
      "type": "data",
      "query": "timeseries sum(cloud.aws.sqs.numberOfMessagesReceivedByAccountIdQueueNameRegion),\nby: { queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND NOT(contains( queuename, \"DeadLetter\")) AND NOT(contains( queuename, \"Logging\")) }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "NumberOfMessagesReceived",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "sum(cloud.aws.sqs.numberOfMessagesReceivedByAccountIdQueueNameRegion)"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "64": {
      "title": "Messages Visible - SQS",
      "type": "data",
      "query": "timeseries approximateNumberOfMessagesVisibleByAccountIdQueueNameRegion=sum(cloud.aws.sqs.approximateNumberOfMessagesVisibleByAccountIdQueueNameRegion),\nby:{ queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND NOT(contains( queuename, \"DeadLetter\")) AND NOT(contains( queuename, \"Logging\")) }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "ApproximateNumberOfMessagesVisible",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "approximateNumberOfMessagesVisibleByAccountIdQueueNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "65": {
      "title": "Messages not visible - SQS",
      "type": "data",
      "query": "timeseries approximateNumberOfMessagesNotVisibleByAccountIdQueueNameRegion=sum(cloud.aws.sqs.approximateNumberOfMessagesNotVisibleByAccountIdQueueNameRegion),\nby:{ queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND NOT(contains( queuename, \"DeadLetter\")) AND NOT(contains( queuename, \"Logging\")) }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "ApproximateNumberOfMessagesNotVisible",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "approximateNumberOfMessagesNotVisibleByAccountIdQueueNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "67": {
      "title": "ApproximateAgeOfOldestMessage - SQS",
      "type": "data",
      "query": "timeseries approximateAgeOfOldestMessageByAccountIdQueueNameRegion=avg(cloud.aws.sqs.approximateAgeOfOldestMessageByAccountIdQueueNameRegion),by:{queuename}, filter: { aws.account.id == $SelectedAWSAccount AND NOT(contains( queuename, \"DeadLetter\")) AND NOT(contains( queuename, \"Logging\"))}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": { "xAxisScaling": "analyzedTimeframe" },
        "legend": { "ratio": 23 },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": 1,
            "field": "",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": "≥",
                "label": "50 percent ",
                "value": 21600
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "≥",
                "label": "100 percent",
                "value": 43200
              }
            ]
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-2h", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "68": { "type": "markdown", "content": "## DLQ Metrics\n" },
    "69": {
      "title": "Messages Sent - DLQ",
      "description": "",
      "type": "data",
      "query": "timeseries sum(cloud.aws.sqs.numberOfMessagesSentByAccountIdQueueNameRegion), \nby: { queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND contains( queuename, \"DeadLetter\") }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "NumberOfMessagesSent",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "seriesOverrides": [
            {
              "seriesId": [
                "count(cloud.aws.sqs.numberOfMessagesSentByAccountIdQueueNameRegion)"
              ],
              "override": { "color": "#b3007d" }
            }
          ],
          "fieldMapping": {
            "leftAxisValues": [
              "sum(cloud.aws.sqs.numberOfMessagesSentByAccountIdQueueNameRegion)"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      },
      "segments": { "tileSegments": [], "tileSegmentsEnabled": false }
    },
    "70": {
      "title": "Messages Received - DLQ",
      "type": "data",
      "query": "timeseries sum(cloud.aws.sqs.numberOfMessagesReceivedByAccountIdQueueNameRegion),\nby: { queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND contains( queuename, \"DeadLetter\") }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "NumberOfMessagesReceived",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "sum(cloud.aws.sqs.numberOfMessagesReceivedByAccountIdQueueNameRegion)"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "71": {
      "title": "Messages Visible - DLQ",
      "type": "data",
      "query": "timeseries approximateNumberOfMessagesVisibleByAccountIdQueueNameRegion=sum(cloud.aws.sqs.approximateNumberOfMessagesVisibleByAccountIdQueueNameRegion),\nby:{ queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND contains( queuename, \"DeadLetter\")}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "ApproximateNumberOfMessagesVisible",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "approximateNumberOfMessagesVisibleByAccountIdQueueNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "72": {
      "title": "Messages not visible - DLQ",
      "type": "data",
      "query": "timeseries approximateNumberOfMessagesNotVisibleByAccountIdQueueNameRegion=sum(cloud.aws.sqs.approximateNumberOfMessagesNotVisibleByAccountIdQueueNameRegion),\nby:{ queuename },\nfilter: { aws.account.id == $SelectedAWSAccount AND contains( queuename, \"DeadLetter\") }",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": {
          "truncationMode": "middle",
          "leftYAxisSettings": {
            "label": "ApproximateNumberOfMessagesNotVisible",
            "isLabelVisible": true
          },
          "xAxisLabel": "timeframe",
          "xAxisScaling": "analyzedTimeframe",
          "fieldMapping": {
            "leftAxisValues": [
              "approximateNumberOfMessagesNotVisibleByAccountIdQueueNameRegion"
            ],
            "timestamp": "timeframe"
          }
        },
        "autoSelectVisualization": false,
        "thresholds": [],
        "dataMapping": { "displayedFields": ["queuename"] }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-365d", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    },
    "73": {
      "title": "ApproximateAgeOfOldestMessage - DLQ",
      "type": "data",
      "query": "timeseries approximateAgeOfOldestMessageByAccountIdQueueNameRegion=avg(cloud.aws.sqs.approximateAgeOfOldestMessageByAccountIdQueueNameRegion),by:{queuename}, filter: { aws.account.id == $SelectedAWSAccount AND contains( queuename, \"DeadLetter\")}",
      "visualization": "lineChart",
      "visualizationSettings": {
        "chartSettings": { "xAxisScaling": "analyzedTimeframe" },
        "legend": { "ratio": 23 },
        "autoSelectVisualization": false,
        "thresholds": [
          {
            "id": 1,
            "field": "",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": "≥",
                "label": "80 percent ",
                "value": 103680
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "≥",
                "label": "100 percent",
                "value": 129680
              }
            ]
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      },
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "timeframe": {
        "tileTimeframe": { "from": "now()-2h", "to": "now()" },
        "tileTimeframeEnabled": false
      }
    }
  },
  "layouts": {
    "0": { "x": 0, "y": 0, "w": 36, "h": 2 },
    "1": { "x": 0, "y": 2, "w": 36, "h": 1 },
    "2": { "x": 18, "y": 3, "w": 18, "h": 10 },
    "3": { "x": 0, "y": 13, "w": 18, "h": 10 },
    "4": { "x": 18, "y": 19, "w": 18, "h": 4 },
    "5": { "x": 18, "y": 13, "w": 18, "h": 3 },
    "6": { "x": 18, "y": 16, "w": 18, "h": 3 },
    "7": { "x": 0, "y": 23, "w": 36, "h": 4 },
    "8": { "x": 0, "y": 27, "w": 36, "h": 1 },
    "25": { "x": 0, "y": 28, "w": 19, "h": 9 },
    "26": { "x": 19, "y": 28, "w": 17, "h": 9 },
    "27": { "x": 0, "y": 37, "w": 19, "h": 9 },
    "28": { "x": 19, "y": 37, "w": 17, "h": 9 },
    "29": { "x": 0, "y": 46, "w": 19, "h": 9 },
    "30": { "x": 19, "y": 46, "w": 17, "h": 9 },
    "31": { "x": 0, "y": 64, "w": 25, "h": 10 },
    "34": { "x": 0, "y": 3, "w": 18, "h": 10 },
    "37": { "x": 0, "y": 55, "w": 18, "h": 9 },
    "39": { "x": 19, "y": 74, "w": 17, "h": 9 },
    "40": { "x": 0, "y": 74, "w": 19, "h": 9 },
    "41": { "x": 19, "y": 83, "w": 17, "h": 9 },
    "42": { "x": 0, "y": 83, "w": 19, "h": 9 },
    "51": { "x": 0, "y": 92, "w": 36, "h": 1 },
    "52": { "x": 0, "y": 102, "w": 19, "h": 9 },
    "53": { "x": 0, "y": 111, "w": 19, "h": 9 },
    "54": { "x": 19, "y": 102, "w": 17, "h": 9 },
    "55": { "x": 0, "y": 93, "w": 19, "h": 9 },
    "56": { "x": 19, "y": 93, "w": 17, "h": 9 },
    "57": { "x": 0, "y": 120, "w": 36, "h": 1 },
    "62": { "x": 0, "y": 121, "w": 18, "h": 7 },
    "63": { "x": 18, "y": 121, "w": 18, "h": 7 },
    "64": { "x": 0, "y": 128, "w": 18, "h": 8 },
    "65": { "x": 18, "y": 128, "w": 18, "h": 8 },
    "67": { "x": 0, "y": 136, "w": 18, "h": 8 },
    "68": { "x": 0, "y": 144, "w": 36, "h": 2 },
    "69": { "x": 0, "y": 146, "w": 18, "h": 7 },
    "70": { "x": 18, "y": 146, "w": 18, "h": 7 },
    "71": { "x": 0, "y": 153, "w": 18, "h": 8 },
    "72": { "x": 18, "y": 153, "w": 18, "h": 8 },
    "73": { "x": 0, "y": 161, "w": 18, "h": 7 }
  },
  "importedWithCode": true,
  "settings": {
    "gridLayout": { "mode": "responsive", "columnsCount": 36 },
    "defaultTimeframe": {
      "value": { "from": "now()-2h", "to": "now()" },
      "enabled": false
    },
    "defaultSegments": { "value": [], "enabled": false }
  }
}
